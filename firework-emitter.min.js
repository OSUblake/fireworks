class FireworkEmitter{constructor(fireworks,image){this.fireworks=fireworks,this.image=new FireworkImage(fireworks,image),this.exploded=!1,this.x=0,this.y=0,this.rotation=0,this.rotationSign=1,this.particles=[],this.aliveCount=1}async prepare(){await this.image.init(),this.createParticles()}play(){this.image.play()}explode(){const particles=this.particles;for(let i=0;i<particles.length;i++)particles[i].play();this.exploded=!0}init(){const{particles:particles,x:x,y:y,rotation:rotation,rotationSign:rotationSign}=this;for(let i=0;i<particles.length;i++)particles[i].init(x,y,rotation,rotationSign)}createParticles(){const fireworks=this.fireworks,{width:width,height:height}=this.image,{numParticles:numParticles,particleSize:particleSize}=this.fireworks;this.addParticles(!1);let len=this.particles.length;if(len)for(this.addParticles(!0);len<numParticles;)this.addParticles(!0),len=this.particles.length}addParticles(centered){const{fireworks:fireworks,image:image}=this,{width:width,height:height}=image,{particleSize:particleSize,shapeTextures:shapeTextures,randomShape:randomShape}=fireworks,cx=width/2,cy=height/2,size=particleSize,offset=size/2;let count=0;for(let y=0;y<height;y+=size)for(let x=0;x<width;x+=size){const color=image.getColor(x,y);if(color.a<.9)continue;const rgb=`rgb(${color.r}, ${color.g}, ${color.b})`;shapeTextures.addColor(rgb);const shape=randomShape(),particle=new FireworkParticle(fireworks,{centered:centered,color:rgb,alpha:color.a,dx:x+offset-cx,dy:y+offset-cy,frame:shapeTextures.getFrame(rgb,shape)});this.particles.push(particle),count++}return count}update(){const{exploded:exploded,image:image,particles:particles,x:x,y:y}=this;let alive=0;if(exploded)for(let i=0;i<particles.length;i++){const particle=particles[i];particle.alive&&(particle.render(),alive++)}else image.x=x,image.y=y,image.rotation=this.rotation,image.render(),alive++;this.aliveCount=alive,alive||image.pause()}}