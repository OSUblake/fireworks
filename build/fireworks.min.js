const utils={RAD:Math.PI/180,DEG:180/Math.PI,randomChoice(a,b,chance=.5){return Math.random()<chance?a:b},nextPow2(value){return Math.pow(2,Math.ceil(Math.log(value)/Math.log(2)))},getScale(width,height,size){return Math.min(size/width,size/height)}};(function(f,e){"object"===typeof exports&&"undefined"!==typeof module?module.exports=e():"function"===typeof define&&define.amd?define(e):f.Stats=e()})(this,(function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?"block":"none";l=a}var l=0,c=document.createElement("div");c.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000";c.addEventListener("click",(function(a){a.preventDefault();u(++l%c.children.length)}),!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel("FPS","#0ff","#002")),h=e(new f.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var t=e(new f.Panel("MB","#f08","#201"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>=g+1e3&&(r.update(1e3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement("canvas");q.width=r;q.height=h;q.style.cssText="width:80px;height:48px";var b=q.getContext("2d");b.font="bold "+9*a+"px Helvetica,Arial,sans-serif";b.textBaseline="top";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);b.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+" "+e+" ("+g(c)+"-"+g(k)+")",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f}));class EmoteData{constructor(fireworks,image){this.image=image;this.fireworks=fireworks;this.cropExplosion=fireworks.cropExplosion;this.imageData=[0,0,0,0];this.isValid=false;this.isVideo=image instanceof HTMLMediaElement;this.baseWidth=image.naturalWidth||image.videoWidth||image.width;this.baseHeight=image.naturalHeight||image.videoHeight||image.height;const maxSize=this.fireworks.maxImageSize;const shellSize=this.fireworks.shellSize;this.scaleMin=utils.getScale(this.baseWidth,this.baseHeight,shellSize);this.scaleMax=utils.getScale(this.baseWidth,this.baseHeight,maxSize);let ratio=1;if(fireworks.explosionType==="particle"){this.startWidth=Math.floor(this.baseWidth*this.scaleMin);this.startHeight=Math.floor(this.baseHeight*this.scaleMin);this.endWidth=Math.floor(this.baseWidth*this.scaleMax);this.endHeight=Math.floor(this.baseHeight*this.scaleMax)}else{if(this.scaleMax<1){ratio=this.scaleMax}this.startWidth=this.endWidth=Math.floor(this.baseWidth*ratio);this.startHeight=this.endHeight=Math.floor(this.baseHeight*ratio)}this.colorCache=[];this.validColors=[];this.isValid=false;this.minAlpha=fireworks.minPixelAlpha}async init(){const image=this.image;return new Promise(resolve=>{if(!image){console.log("*** FIREWORKS: Invalid Texture");return resolve()}if(!this.isVideo){this.createImageData();resolve()}else{const fulfill=()=>{image.removeEventListener("timeupdate",fulfill);this.createImageData();resolve()};image.addEventListener("timeupdate",fulfill);image.currentTime=image.duration*.5}})}resizeImage(){const frame=new PIXI.Rectangle(0,0,this.baseWidth,this.baseHeight);let src;if(this.isVideo){src=this.image;src.loop=true}else{const canvas=document.createElement("canvas");const ctx=canvas.getContext("2d");canvas.width=utils.nextPow2(this.baseWidth);canvas.height=utils.nextPow2(this.baseHeight);ctx.drawImage(this.image,0,0);src=canvas}this.baseTexture=new PIXI.BaseTexture(src);this.texture=new PIXI.Texture(this.baseTexture,frame)}createImageData(){const image=this.image;const canvas=document.createElement("canvas");const ctx=canvas.getContext("2d");canvas.width=this.endWidth;canvas.height=this.endHeight;ctx.imageSmoothingEnabled=false;ctx.drawImage(image,0,0,this.baseWidth,this.baseHeight,0,0,canvas.width,canvas.height);this.imageData=ctx.getImageData(0,0,canvas.width,canvas.height).data;const radius=Math.min(canvas.width,canvas.height)/2;this.circle=new PIXI.Circle(canvas.width/2,canvas.height/2,radius);this.createColors();this.resizeImage()}createColors(){const width=this.endWidth;const height=this.endHeight;let reds=0;let greens=0;let blues=0;const validColors=[];const colorCache=[];const minAlpha=0;const data=this.imageData;for(let y=0;y<height;y++){for(let x=0;x<width;x++){const i=(y*width+x)*4;const r=data[i];const g=data[i+1];const b=data[i+2];const a=data[i+3]/255;if(a>=minAlpha){const tint=(r<<16)+(g<<8)+(b|0);reds+=r;greens+=g;blues+=b;validColors.push(tint);colorCache.push(tint)}else{colorCache.push(-1)}}}const count=validColors.length;const r=reds/count;const g=greens/count;const b=blues/count;this.avgColor=(r<<16)+(g<<8)+(b|0);this.validColors=validColors;this.colorCache=colorCache;this.isValid=!!count;this.randomColor=gsap.utils.random(this.validColors,true)}getColor(x=0,y=0){const i=y*this.endWidth+x;const tint=this.colorCache[i];if(this.cropExplosion&&!this.circle.contains(x,y)){return-1}if(tint!=null){return tint}return-1}}class DisplayObject{constructor(fireworks){this.fireworks=fireworks;this.originX=0;this.originY=0;this.scaleX=1;this.scaleY=1;this._skewX=0;this._skewY=0;this._rotation=0;this.x=0;this.y=0;this._cx=1;this._sx=0;this._cy=0;this._sy=1;this.updateId=0}get skewX(){return this._skewX}set skewX(value){if(this._skewX!==value){this._skewX=value;this.updateId++}}get skewY(){return this._skewY}set skewY(value){if(this._skewY!==value){this._skewY=value;this.updateId++}}get rotation(){return this._rotation}set rotation(value){if(this._rotation!==value){this._rotation=value;this.updateId++}}updateSkew(){this._cx=Math.cos(this._rotation+this._skewY);this._sx=Math.sin(this._rotation+this._skewY);this._cy=-Math.sin(this._rotation-this._skewX);this._sy=Math.cos(this._rotation-this._skewX)}setTransform(){const{fireworks:fireworks,originX:originX,originY:originY,rotation:rotation,scaleX:scaleX,scaleY:scaleY,skewX:skewX,skewY:skewY,x:x,y:y}=this;const{ctx:ctx,dpr:dpr,offsetY:offsetY}=fireworks;if(this.updateId){this.updateSkew();this.updateId=0}let x1=x-originX;let y1=offsetY+(y-originY);const a=this._cx*scaleX;const b=this._sx*scaleX;const c=this._cy*scaleY;const d=this._sy*scaleY;const e=x1+originX-(originX*a+originY*c);const f=y1+originY-(originX*b+originY*d);ctx.setTransform(a*dpr,b*dpr,c*dpr,d*dpr,e*dpr,f*dpr)}}class ShapeTextures{constructor(fireworks,particleSize=64){this.fireworks=fireworks;this.particleSize=particleSize;this.shapes={};this.numShapes=0;this.texture=document.createElement("canvas");this.pad=4;const size=this.size=particleSize+this.pad;this.width=1024;this.cols=Math.floor(this.width/size);this.rows=1;const p1=new Path2D;p1.rect(0,0,particleSize,particleSize);const p2=new Path2D;p2.moveTo(particleSize/2,0);p2.lineTo(particleSize,particleSize);p2.lineTo(0,particleSize);p2.closePath();const p3=new Path2D;p3.arc(particleSize/2,particleSize/2,particleSize/2,0,Math.PI*2);this.rectPath=p1;this.trianglePath=p2;this.circlePath=p3;this.addColor("rgb(255,255,255)");this.generate()}addColor(color){color=color.replace(/\s/g,"");const key1=color+"-rect";const key2=color+"-triangle";const key3=color+"-circle";if(this.shapes[key1]){return this}this.shapes[key1]=this.addFrame(color,this.rectPath);this.shapes[key2]=this.addFrame(color,this.trianglePath);this.shapes[key3]=this.addFrame(color,this.circlePath,true)}addFrame(color,path,useGradient=false){const dpr=this.fireworks.dpr;const size=this.size;const rows=Math.floor(this.numShapes/this.cols);let x=this.numShapes*size%(this.cols*size);let y=rows*size;this.rows=rows+1;const frame={color:color,x:x,y:y,path:path,sSize:this.particleSize*dpr,dSize:this.particleSize,sx:x*dpr,sy:y*dpr,texture:this.texture,useGradient:useGradient};frame.rect=new PIXI.Rectangle(frame.sx,frame.sy,frame.sSize,frame.sSize);this.numShapes++;return frame}getFrame(color,shape="rect"){color=color.replace(/\s/g,"");return this.shapes[`${color}-${shape}`]}generate(){const dpr=this.fireworks.dpr;this.texture.width=this.width*dpr;this.height=this.rows*this.size;this.texture.height=utils.nextPow2(this.height*dpr);const ctx=this.texture.getContext("2d");const radius=this.particleSize/2;const gradient=ctx.createRadialGradient(radius,radius,radius*.25,radius,radius,radius);gradient.addColorStop(0,"rgba(255,255,255,1)");gradient.addColorStop(.2,"rgba(255,255,255,0.25)");gradient.addColorStop(1,"rgba(0,0,0,0)");for(const[key,frame]of Object.entries(this.shapes)){ctx.setTransform(dpr,0,0,dpr,frame.x*dpr,frame.y*dpr);ctx.fillStyle=frame.useGradient?gradient:frame.color;ctx.fill(frame.path)}this.baseTexture=new PIXI.BaseTexture(this.texture,{resolution:dpr});const frame1=this.getFrame("rgb(255,255,255)","rect").rect;const frame2=this.getFrame("rgb(255,255,255)","triangle").rect;const frame3=this.getFrame("rgb(255,255,255)","circle").rect;this.rectTexture=new PIXI.Texture(this.baseTexture,frame1);this.triangleTexture=new PIXI.Texture(this.baseTexture,frame2);this.circleTexture=new PIXI.Texture(this.baseTexture,frame3)}}class FireworkEmitter{constructor(fireworks,emote){this.emote=emote;this.fireworks=fireworks;this.image=new FireworkImage(fireworks,emote);this.imageData=emote.data;this.exploded=false;this.launched=false;this.x=0;this.y=0;this.rotation=0;this.rotationSign=1;this.particles=[];this.aliveCount=1;fireworks.emitterContainer.addChild(this.image);this.container=new PIXI.ParticleContainer(3e3,{vertices:true,position:true,rotation:true,tint:true});const screen=fireworks.screen;this.container.filterArea=screen}async _prepare(){await this.image.init();this.createParticles()}prepare(){this.createParticles();console.log("NUM PARTICLES",this.particles.length)}play(){this.image.play()}launch(){this.emote.launchSound.play();this.launched=true}explode(){const particles=this.particles;for(let i=0;i<particles.length;i++){particles[i].alive=true;particles[i].alpha=.5;particles[i].play()}this.fireworks.particleContainer.addChild(this.container);this.emote.popSound.play();this.image.alpha=.5;this.exploded=true}init(){const{particles:particles,x:x,y:y,rotation:rotation,rotationSign:rotationSign}=this;for(let i=0;i<particles.length;i++){particles[i].initPolygon(x,y,rotation)}}createParticles(){const fireworks=this.fireworks;const{numParticles:numParticles,particleSize:particleSize}=this.fireworks;if(fireworks.isParticleExplosion){return this.addParticles(true)}this.addParticles(false);let len=this.particles.length;if(!len){return}this.addParticles(true);while(len<numParticles){this.addParticles(true);len=this.particles.length}}addParticles(centered){const{fireworks:fireworks,imageData:imageData}=this;const width=imageData.endWidth;const height=imageData.endHeight;const{isParticleExplosion:isParticleExplosion,polygonSize:polygonSize,shapeTextures:shapeTextures,randomShape:randomShape,explosionType:explosionType}=fireworks;const size=isParticleExplosion?5:polygonSize;const cx=width/2;const cy=height/2;const offset=Math.round(size/2);let count=0;let tint=0;for(let y=0;y<height;y+=size){for(let x=0;x<width;x+=size){const xPos=x+offset;const yPos=y+offset;if(xPos>width||yPos>height){continue}if(centered){tint=imageData.randomColor()}else{tint=imageData.getColor(xPos,yPos)}if(tint<0){continue}const shape=isParticleExplosion?"circle":randomShape();const texture=shapeTextures[shape+"Texture"];const particle=new FireworkParticle(texture,fireworks,{centered:centered,tint:tint,dx:xPos-cx,dy:yPos-cy});this.container.addChild(particle);this.particles.push(particle);count++}}return count}update(){const{exploded:exploded,image:image,particles:particles,x:x,y:y}=this;let alive=0;if(!this.launched&&y<0){this.launch()}if(!exploded){image.x=x;image.y=y;image.rotation=this.rotation;alive++}else{for(let i=0;i<particles.length;i++){const particle=particles[i];if(particle.alive){alive++}}}this.aliveCount=alive;if(!alive){}}}class FireworkImage extends PIXI.Sprite{constructor(fireworks,emote){super(emote.data.texture);this.fireworks=fireworks;this.emote=emote;this.origImage=emote.image;const data=emote.data;this.imageData=data.imageData;this.isValid=data.isValid;this.isVideo=data.isVideo;this.baseWidth=data.baseWidth;this.baseHeight=data.baseHeight;this.width=data.startWidth;this.height=data.startHeight;this.startWidth=data.startWidth;this.startHeight=data.startHeight;this.endWidth=data.endWidth;this.endHeight=data.endHeight;this.anchor.set(.5)}play(){if(this.isVideo){this.origImage.currentTime=0}}pause(){if(this.isVideo){}}randomColor(){return this.emote.data.randomColor()}getColor(x=0,y=0){return this.emote.data.getColor(x,y)}}class FireworkParticle extends PIXI.Sprite{constructor(texture,fireworks,settings){super(texture);this.fireworks=fireworks;Object.assign(this,{alive:false,alpha:0,centered:false,dx:0,dy:0},settings);this.size=fireworks.particleSize;this.anchor.set(.5);this.timeline=gsap.timeline({paused:true})}initPolygon(cx,cy,currentRotation){const{dx:dx,dy:dy,fireworks:fireworks}=this;const startAlpha=gsap.utils.random(.5,1,true);const scale=gsap.utils.random(.5,1,true);const duration=gsap.utils.random(1,2,true);const friction=gsap.utils.random(.1,.3,true);const gravity=400;const rotation=gsap.utils.random(45*utils.RAD,90*utils.RAD,true);const spread=60;const skew=gsap.utils.random(-45*utils.RAD,45*utils.RAD,true);const velocity=gsap.utils.random(800,1100,true);this.rotation=currentRotation;let angle=0;let minAngle=0;let maxAngle=360;let frictionValue=friction();frictionValue=utils.randomChoice(Math.min(frictionValue*2,.8),frictionValue,.3);const cos=Math.cos(currentRotation);const sin=Math.sin(currentRotation);this.x=cos*dx-sin*dy+cx;this.y=cos*dy+sin*dx+cy;angle=Math.atan2(this.y-cy,this.x-cx)*utils.DEG;minAngle=angle-spread;maxAngle=angle+spread;if(fireworks.clusterParticles&&this.centered){this.x=cx;this.y=cy;angle=0;minAngle=0;maxAngle=360}this.alpha=0;this.timeline.to(this.scale,{duration:duration,x:0,y:0},0).to(this,{duration:duration,physics2D:{angle:gsap.utils.random(minAngle,maxAngle),friction:frictionValue,velocity:velocity,gravity:gravity}},0);this.timeline.progress(1,true).progress(0,true)}play(){this.alive=true;this.timeline.play()}kill(){this.timeline.kill();this.alpha=0;this.alive=false}update(){}___render(){if(!this.alpha||!this.scaleX||!this.scaleY){return}const{fireworks:fireworks,frame:frame}=this;const ctx=fireworks.ctx;this.setTransform();ctx.globalAlpha=this.alpha;ctx.drawImage(frame.texture,frame.sx,frame.sy,frame.sSize,frame.sSize,0,0,frame.dSize,frame.dSize)}}class Fireworks extends PIXI.Application{constructor(settings){const dpr=window.devicePixelRatio||1;super({resolution:dpr,view:settings.canvas,autoStart:false,resizeTo:window,antialias:true,transparent:true});Object.assign(this,settings);if(settings.debug){this.stats=new Stats;this.stats.showPanel(0);document.body.appendChild(this.stats.dom);this.stats.dom.style.left="unset";this.stats.dom.style.right="0px"}this.stage.filterArea=this.screen;this.dpr=window.devicePixelRatio;this.emitterContainer=new PIXI.Container;this.particleContainer=new PIXI.Container;this.trailContainer=new PIXI.Container;this.mainContainer=new PIXI.Container;this.mainContainer.addChild(this.trailContainer,this.emitterContainer,this.particleContainer);this.canPlay=false;this.update=this.update.bind(this);this.fireworksTimeline=gsap.timeline({paused:true});this.trailParticles=[];this.shapeTextures=new ShapeTextures(this);this.randomColor=gsap.utils.random(this.colors,true);this.randomShape=gsap.utils.random(["triangle","rect"],true);console.log("FIREWORKS",this);this.stage.filterArea=this.screen;if(this.emotes.length){this.prepare()}else{this.fireReady()}}async prepare(){this.emoteData=new Map;const promises=this.emotes.map(emote=>{if(this.emoteData.has(emote)){return emote}this.emoteData.set(emote);emote.data=new EmoteData(this,emote.image);return emote.data.init()});await Promise.all(promises);console.time("CREATE SPRITES");var texture=this.emotes[0].texture;var sprites=[];for(var i=0;i<5e3;i++){sprites.push(new PIXI.Sprite(texture))}console.timeEnd("CREATE SPRITES");this.emitters=this.emotes.filter(emote=>emote.data.isValid).map(emote=>new FireworkEmitter(this,emote));this.onResize();this.mainExplodeY=-(this.height-this.mainExplodeY);window.addEventListener("resize",e=>this.onResize());this.emitters.forEach(emitter=>emitter.prepare());console.time("INIT");this.init();console.timeEnd("INIT");this.fireReady();if(this.debug){const numParticles=this.emitters.reduce((res,emitter)=>res+emitter.particles.length,0);console.log("NUM PARTICLES",numParticles)}}init(){this.shapesBaseTexture=this.shapeTextures.baseTexture;this.shapesSprite=new PIXI.Sprite(new PIXI.Texture(this.shapesBaseTexture));if(this.debug){this.text=new PIXI.Text("",{fontFamily:"monospace",fontSize:18,fill:16777215,dropShadow:true,dropShadowDistance:1});this.stage.addChild(this.shapesSprite,this.text)}this.stage.addChild(this.mainContainer);this.canPlay=true;const{cx:cx,mainExplodeY:mainExplodeY}=this;const minRotation=80;const maxRotation=120;const spread=200;const size=this.maxImageSize;const spawnWidth=Math.min(this.spawnWidth,this.width)/2;let spawnSide=1;const randomX=gsap.utils.random(100,spawnWidth,true);const randomY=gsap.utils.random(mainExplodeY-spread,mainExplodeY+spread,true);const randomRotation=gsap.utils.random(minRotation*utils.RAD,maxRotation*utils.RAD,true);const randomDelay=gsap.utils.random(.1,.5,true);const randomDrop=gsap.utils.random(50,80,true);this.emitters.forEach((emitter,index)=>{const isMain=!index;const sign=utils.randomChoice(1,-1);const duration=1;const drop=randomDrop();let delay,peakY,explodeY;if(isMain){peakY=mainExplodeY-drop;explodeY=mainExplodeY;delay=0}else{peakY=randomY();explodeY=peakY+drop;if(this.fireworkDelay){const delayOffset=this.fireworkDelay*.2;delay=this.fireworkDelay*index+gsap.utils.random(-delayOffset,delayOffset)}else{delay=randomDelay()}}emitter.rotationSign=sign;emitter.x=isMain?cx:cx+randomX()*spawnSide;emitter.y=this.height;spawnSide*=-1;const tl=gsap.timeline({paused:true}).to(emitter,{duration:duration*2,ease:"none",rotation:"+="+randomRotation()*sign},0).to(emitter,{duration:duration,ease:"sine.out",y:peakY},0).to(emitter,{duration:duration,ease:"sine.in",y:0},">");tl.time(duration,true);let explodeTime=0;for(let i=0;i<=1;i+=.01){const currentTime=duration+duration*i;tl.time(currentTime,true);if(emitter.y>explodeY){console.time(`EMITTER ${index}`);emitter.init();console.timeEnd(`EMITTER ${index}`);explodeTime=currentTime;break}}tl.progress(0,true);const progress=explodeTime/tl.duration();const tweener=gsap.timeline({onStart:()=>{emitter.play()}}).to(tl,{duration:this.explodeTime,progress:progress,ease:"none",onComplete:()=>{tl.kill();emitter.explode()}},0);const trailAnimation=this.createTrailParticles({emitter:emitter,startY:emitter.y,endY:explodeY,isMain:isMain,delay:delay});tweener.add(trailAnimation,0);this.fireworksTimeline.add(tweener,delay)})}createTrailParticles(settings){const{delay:delay,emitter:emitter,endY:endY,isMain:isMain}=settings;const{randomColor:randomColor,shapeTextures:shapeTextures}=this;const minRotation=360;const maxRotation=720;const imageSize=Math.min(emitter.image.width,emitter.image.height);const maxOffsetX=Math.min(10,imageSize/2);const randomDelay=gsap.utils.random(0,.5,true);const randomDrop=gsap.utils.random(100,150,true);const randomOffsetX=gsap.utils.random(50,maxOffsetX,true);const randomOffsetY=gsap.utils.random(endY*.2,endY*.5,true);const randomRotation=gsap.utils.random(minRotation*utils.RAD,maxRotation*utils.RAD,true);const size=gsap.utils.mapRange(this.minImageSizeSlider,this.maxImageSizeSlider,this.minTrailParticleSize,this.maxTrailParticleSize,imageSize);const scale=size/this.shapeTextures.particleSize;const count=isMain?gsap.utils.random(6,9,1):gsap.utils.random(2,3,1);const trailTimeline=gsap.timeline();for(let i=0;i<count;i++){const tint=randomColor();const x=emitter.x+randomOffsetX()*utils.randomChoice(1,-1);const shape=this.randomShape();const sign=utils.randomChoice(1,-1);const offsetY=randomOffsetY();const startY=emitter.y+offsetY;const peakY=endY-offsetY;const fadeY=peakY+randomDrop();const texture=shapeTextures[shape+"Texture"];const particle=new FireworkParticle(texture,this,{tint:tint,x:x,y:startY,rotation:Math.random()*Math.PI});particle.scale.set(scale);this.trailContainer.addChild(particle);const duration=1;const tl=gsap.timeline({paused:true}).to(particle,{duration:duration,y:peakY,ease:"sine.out"}).to(particle,{duration:duration,y:0,ease:"sine.in"}).to(particle,{duration:duration*2,rotation:"+="+randomRotation()*sign,ease:"power3.in"},0);let endTime=0;for(let i=0;i<=1;i+=.01){const currentTime=duration+duration*i;tl.time(currentTime,true);if(particle.y>fadeY){endTime=currentTime;break}}const timeDifference=endTime-duration;tl.to(particle.scale,{ease:"power3.in",duration:timeDifference*2,x:0,y:0},duration-timeDifference);tl.progress(0,true);const progress=endTime/tl.duration();const minDuration=this.explodeTime+.1;const maxDuration=minDuration+.3;const tweenerDuration=gsap.utils.random(minDuration,maxDuration);const tweener=gsap.timeline({onStart:()=>{particle.alive=true;particle.alpha=1},onComplete:()=>{particle.alive=false;tl.kill()}}).to(tl,{duration:tweenerDuration,progress:progress,ease:"none"});trailTimeline.add(tweener,0);this.trailParticles.push(particle)}return trailTimeline}onResize(){this.width=this.screen.width;this.height=this.screen.height;this.cx=this.width/2;this.cy=this.height/2;this.offsetY=this.height;this.mainContainer.y=this.offsetY;this.renderer.resize(this.width,this.height)}play(tl){if(!this.canPlay){console.log("*** Fireworks can't play");return}this.lastTime=performance.now();this.fireworksTimeline.play(0);tl.play(0);gsap.ticker.add(this.update);this.update()}kill(){gsap.ticker.remove(this.update);if(this.debug){console.log("*** Fireworks complete")}}fireReady(){this.onReady&&this.onReady.call(this,this)}update(time,deltaTime){const{emitters:emitters,trailParticles:trailParticles}=this;let aliveCount=0;let i=0;for(i=0;i<trailParticles.length;i++){const particle=trailParticles[i];if(particle.alive){aliveCount++}}for(i=0;i<emitters.length;i++){emitters[i].update();aliveCount+=emitters[i].aliveCount}if(!aliveCount){this.kill()}if(this.debug){this.stats.update()}this.renderer.render(this.stage)}}